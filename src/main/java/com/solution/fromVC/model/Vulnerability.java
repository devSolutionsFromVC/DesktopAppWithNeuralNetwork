package com.solution.fromVC.model;

import javax.persistence.*;

@Entity
@Table(name = "VULNERABILITY")
public class Vulnerability {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    private Long id;

    @Basic(optional = false)
    @Column(name = "NAME")
    private String name;

    @Column(name = "DESCRIPTION")
//    @Size(max = 1000)
    private String description;

    @JoinColumn(name = "THREAT_ID", referencedColumnName = "ID", nullable = false)
    @ManyToOne
    private Threat threat;

    @JoinColumn(name = "ASSET_ID", referencedColumnName = "ID", nullable = false)
    @ManyToOne
    private Assets assets;

    @OneToOne(cascade = CascadeType.ALL, mappedBy = "vulnerability")
    private Risk risk;

    public Vulnerability() {
    }

    public Vulnerability(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Threat getThreat() {
        return threat;
    }

    public void setThreat(Threat threat) {
        this.threat = threat;
    }

    public Assets getAssets() {
        return assets;
    }

    public void setAssets(Assets assets) {
        this.assets = assets;
    }

    public Risk getRisk() {
        return risk;
    }

    public void setRisk(Risk risk) {
        this.risk = risk;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Vulnerability that = (Vulnerability) o;

        return name != null ? name.equals(that.name) : that.name == null;
    }

    @Override
    public int hashCode() {
        return name != null ? name.hashCode() : 0;
    }
}
